(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{300:function(r,n,i){"use strict";i.r(n);var a=i(24),t=Object(a.a)({},function(){var r=this,n=r.$createElement,i=r._self._c||n;return i("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[i("h1",{attrs:{id:"spring"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring","aria-hidden":"true"}},[r._v("#")]),r._v(" Spring")]),r._v(" "),i("div",{staticClass:"tip custom-block"},[i("p",{staticClass:"custom-block-title"},[r._v("温馨提示")]),r._v(" "),i("p",[r._v("以下文字来源于百度百科")])]),r._v(" "),i("h2",{attrs:{id:"spring-起源"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-起源","aria-hidden":"true"}},[r._v("#")]),r._v(" spring 起源")]),r._v(" "),i("p",[r._v("要谈Spring的历史，就要先谈J2EE。J2EE应用程序的广泛实现是在1999年和2000年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对的成功，因为开发效率，开发难度和实际的性能都令人失望。[EOF]")]),r._v(" "),i("p",[r._v("Spring的一个最大的目的就是使JAVA EE开发更加容易。同时，Spring之所以与Struts、Hibernate等单层框架不同，是因为Spring致力于提供一个以统一的、高效的方式构造整个应用，并且可以将单层框架以最佳的组合揉和在一起建立一个连贯的体系。可以说Spring是一个提供了更完善开发环境的一个框架，可以为POJO(Plain Ordinary Java Object)对象提供企业级的服务。")]),r._v(" "),i("h2",{attrs:{id:"优点"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#优点","aria-hidden":"true"}},[r._v("#")]),r._v(" 优点")]),r._v(" "),i("ul",[i("li",[r._v("JAVA EE应该更加容易使用。")]),r._v(" "),i("li",[r._v("面向对象的设计比任何实现技术（比如JAVA EE）都重要。")]),r._v(" "),i("li",[r._v("面向接口编程，而不是针对类编程。Spring将使用接口的复杂度降低到零。")]),r._v(" "),i("li",[r._v("代码应该易于测试。Spring框架会帮助你，使代码的测试更加简单。")]),r._v(" "),i("li",[r._v("JavaBean提供了应用程序配置的最好方法。")]),r._v(" "),i("li",[r._v("在Java中，已检查异常（Checked exception）被过度使用。框架不应该迫使你捕获不能恢复的异常。")])]),r._v(" "),i("h2",{attrs:{id:"简介"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#简介","aria-hidden":"true"}},[r._v("#")]),r._v(" 简介")]),r._v(" "),i("p",[r._v("Spring是一个开源框架，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然\n而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。")]),r._v(" "),i("p",[r._v("Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。\n轻量——从大小与开销两方面而言Spring都是轻量的。完整的Spring框架可以在一个大小只有1MB多的JAR文件里发布。并且Spring所需的处理开销也是微不足道的。此\n外，Spring是非侵入式的：典型地，Spring应用中的对象不依赖于Spring的特定类。")]),r._v(" "),i("p",[r._v("控制反转——Spring通过一种称作控制反转（IoC）的技术促进了松耦合。当应用了IoC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建\n或者查找依赖对象。你可以认为IoC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。")]),r._v(" "),i("p",[r._v("面向切面——Spring提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（auditing）和事务（transaction）管理）进行内聚性的\n开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。它们并不负责（甚至是意识）其它的系统级关注点，例如日志或事务支持。")]),r._v(" "),i("p",[r._v("容器——Spring包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个bean如何被创建——基于一个可配置原型（prototype），你的\nbean可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，Spring不应该被混同于传统的重量级的EJB容器，它们经常是\n庞大与笨重的，难以使用。")]),r._v(" "),i("p",[r._v("框架——Spring可以将简单的组件配置、组合成为复杂的应用。在Spring中，应用对象被声明式地组合，典型地是在一个XML文件里。Spring也提供了很多基础功能（事\n务管理、持久化框架集成等等），将应用逻辑的开发留给了你。")]),r._v(" "),i("p",[r._v("所有Spring的这些特征使你能够编写更干净、更可管理、并且更易于测试的代码。它们也为Spring中的各种模块提供了基础支持。")])])},[],!1,null,null,null);n.default=t.exports}}]);